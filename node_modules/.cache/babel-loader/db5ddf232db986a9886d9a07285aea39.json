{"ast":null,"code":"var _jsxFileName = \"/Users/clara/Desktop/CareerFoundry/Full-Stack Immersion/meet/src/App.js\";\nimport React from 'react';\nimport { Component } from 'react';\nimport { extractLocations, getEvents } from './api';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      events: [],\n      locations: []\n    };\n\n    this.updateEvents = location => {\n      getEvents().then(events => {\n        const locationEvents = location === 'all' ? events : events.filter(event => event.location === location);\n        this.setState({\n          events: locationEvents\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    getEvents().then(events => {\n      if (this.mounted) {\n        this.setState({\n          events,\n          locations: extractLocations(events)\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(CitySearch, {\n        locations: this.state.locations,\n        updateEvents: this.updateEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EventList, {\n        events: this.state.events\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NumberOfEvents, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/clara/Desktop/CareerFoundry/Full-Stack Immersion/meet/src/App.js"],"names":["React","Component","extractLocations","getEvents","EventList","CitySearch","NumberOfEvents","App","state","events","locations","updateEvents","location","then","locationEvents","filter","event","setState","componentDidMount","mounted","componentWillUnmount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,gBAAT,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAO,WAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BO,KAD0B,GAClB;AACNC,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,SAAS,EAAE;AAFL,KADkB;;AAAA,SAM1BC,YAN0B,GAMVC,QAAD,IAAc;AAC3BT,MAAAA,SAAS,GAAGU,IAAZ,CAAkBJ,MAAD,IAAY;AAC3B,cAAMK,cAAc,GAAIF,QAAQ,KAAK,KAAd,GACrBH,MADqB,GAErBA,MAAM,CAACM,MAAP,CAAeC,KAAD,IAAWA,KAAK,CAACJ,QAAN,KAAmBA,QAA5C,CAFF;AAGA,aAAKK,QAAL,CAAc;AACZR,UAAAA,MAAM,EAAEK;AADI,SAAd;AAGD,OAPD;AAQD,KAfyB;AAAA;;AAiB1BI,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,OAAL,GAAe,IAAf;AACAhB,IAAAA,SAAS,GAAGU,IAAZ,CAAkBJ,MAAD,IAAY;AAC3B,UAAI,KAAKU,OAAT,EAAkB;AAChB,aAAKF,QAAL,CAAc;AAAER,UAAAA,MAAF;AAAUC,UAAAA,SAAS,EAAER,gBAAgB,CAACO,MAAD;AAArC,SAAd;AACD;AACF,KAJD;AAKD;;AAEDW,EAAAA,oBAAoB,GAAG;AACrB,SAAKD,OAAL,GAAe,KAAf;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,SAAS,EAAE,KAAKb,KAAL,CAAWE,SAAlC;AAA6C,QAAA,YAAY,EAAE,KAAKC;AAAhE;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AAAW,QAAA,MAAM,EAAE,KAAKH,KAAL,CAAWC;AAA9B;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAtCyB;;AAyC5B,eAAeF,GAAf","sourcesContent":["import React from 'react';\nimport { Component } from 'react';\nimport { extractLocations, getEvents } from './api';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\n\nclass App extends Component {\n  state = {\n    events: [],\n    locations: []\n  }\n\n  updateEvents = (location) => {\n    getEvents().then((events) => {\n      const locationEvents = (location === 'all') ?\n        events :\n        events.filter((event) => event.location === location);\n      this.setState({\n        events: locationEvents\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    getEvents().then((events) => {\n      if (this.mounted) {\n        this.setState({ events, locations: extractLocations(events) });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <CitySearch locations={this.state.locations} updateEvents={this.updateEvents} />\n        <EventList events={this.state.events} />\n        <NumberOfEvents />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}